pipeline {
  agent any

  // Configure BitBucket and Black Duck server locations
  environment {
    BITBUCKET_URL = 'http://ubuntu-server:7990'
    // This username will be combined with the access token configured in Jenkins
    BITBUCKET_USERNAME = 'jcroall'
    BLACKDUCK_URL = 'https://testing.blackduck.synopsys.com'
  }

  tools {
    jdk 'openjdk-11'
  }

  stages {
    stage('Build') {
      steps {
        sh 'mvn -B compile'
      }
    }

    stage('Test') {
      steps {
        sh 'mvn -B test'
      }
    }

    // Run a Black Duck Rapid Scan on pull requests and subsequent commits to open pull requests,
    // and push code insights into BitBucket.
    stage('Black Duck Rapid Scan') {
      when {
        expression { return env.CHANGE_TARGET ==~ /(master|stage|release)/ }
      }

      steps {
        script {
          BITBUCKET_PROJECT = scm.getUserRemoteConfigs()[0].getUrl().tokenize('/')[2].split("\\.")[0]
          BITBUCKET_REPO = scm.getUserRemoteConfigs()[0].getUrl().tokenize('/')[3].split("\\.")[0]
          BITBUCKET_REF = env.GIT_COMMIT
          BITBUCKET_BRANCH = env.CHANGE_BRANCH
          BITBUCKET_PULL_NUMBER = env.CHANGE_ID
        }

        withCredentials([string(credentialsId: 'bitbucket-token', variable: 'BITBUCKET_PASSWORD')]) {
          withCredentials([string(credentialsId: 'blackduck-token', variable: 'BLACKDUCK_TOKEN')]) {
            // NOTE: Change path to blackduck-scan.py
            echo "EXEC: /home/jcroall/git/github/blackduck-bitbucket-integration/blackduck-scan.py --bb-url ${BITBUCKET_URL} --blackduck-url ${BLACKDUCK_URL}"
            sh "/home/jcroall/git/github/blackduck-bitbucket-integration/blackduck-scan.py --bb-url ${BITBUCKET_URL} --blackduck-url ${BLACKDUCK_URL}"
          }
        }
      }
    }

    // Run a Black Duck Intelligent Scan on pushes to main branch
    stage('Black Duck Intelligent Scan') {
      when {
        expression { return !CHANGE_TARGET }
      }
      steps {
        echo "EXEC: Run intelligent scan"
      }
    }

    stage('Deploy') {
      when {
        expression { env.BRANCH_NAME ==~ /(master|stage|release)/ }
      }
      steps {
        sh 'mvn -B install'
      }
    }
  }
  post {
    always {
      cleanWs()
    }
  }
}